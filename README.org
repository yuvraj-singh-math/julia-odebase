#+title: OscarODEbase.jl
#+author: Yuvraj Singh
OscarODEbase.jl is a Julia module containing almost all polynomial models of [[https://www.odebase.org/][ODEbase]] for use with the computer algebra system OSCAR. ODEbase is a database containing symbolic computation data from established biomodels, by Christoph Lüders, Thomas Sturm, and Ovidiu Radulescu. This module is unaffiliated with ODEbase. For more information on ODEbase, see doi:10.1093/bioadv/vbac027.
* Installing OscarODEbase.jl
To install OscarODEbase.jl:
#+begin_src
julia> Pkg.add(url="https://github.com/yuvraj-singh-math/julia-odebase.git")
#+end_src
alternatively, use SSH:
#+begin_src
julia> Pkg.add(url="git@github.com:yuvraj-singh-math/julia-odebase.git")
#+end_src
* Using OscarODEbase.jl
This module provides a function, ~get_odebase_model~ for importing a supported model from ODEbase into Julia.
#+begin_src julia
julia> using OscarODEbase;
julia> model=get_odebase_model("BIOMD0000000854")
Entry BIOMD0000000854, with 4 species and 11 parameters.
Gray2016 - The Akt switch model
#+end_src
The global variable ~ODEbaseModels~ provides the ID of every system that can be loaded into Julia.
#+begin_src julia
julia> ODEbaseModels
190-element Vector{String}:
 "BIOMD0000000002"
 ⋮
 "BIOMD0000001038"
#+end_src
Each model is of type ~ODEbaseModel~, and carries all the information provided by ODEbase, which can be accessed using provided ~get_INFO~ functions, where ~INFO~ is the desired information: For example:
- the steady state equations of the ODEs ~get_ODEs(::ODEbaseModel)~,
- constraint equations ~get_constraints(::ODEbaseModel)~,
- (reconfigured) stoichiometric matrices ~get_stoich(::ODEbaseModel)~ (~get_reconStoich(::OdebaseModel)~),
- kinetic matrices ~get_kinetic(::ODEbaseModel)~.

#+begin_src julia
julia> get_ODEs(model)
4-element Vector{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.Generic.RationalFunctionFieldElem{Nemo.QQFieldElem, Nemo.QQMPolyRingElem}}}:
 -k1*k3*x1 + k2*x2 + k1*x3
 (-k1*k3 - k2)*x2 + k1*x4
 k1*k3*x1 + (-k1 - k2*k5)*x3 + k2*x4
 k1*k3*x2 + k2*k5*x3 + (-k1 - k2)*x4
#+end_src
To manipulate the steady state polynomials, it may be required to manually bring the variables into scope. This can be done as follows:

#+begin_src julia
julia> using Oscar;
julia> model=get_odebase_model("BIOMD0000000854");
julia> R=model.polRing;
julia> (x1,x2,x3,x4)=gens(R)
#+end_src

All the provided objects listed above are given as types of objects from OSCAR. The ODEs are given as elements of a polynomial ring over a rational function field, and the matrices as matrices of type ~QQMatrix~. See the [[https://docs.oscar-system.org/][OSCAR documentation]] for more information.

To change the coefficient field to e.g. $\mathbb{F}_{5}$, the ~hom~ function can be used.

*Warning*: In order to use OscarODEbase in another module, it is necessary to include any calls to ~get_odebase_model~ in ~__init__()~, see https://github.com/Nemocas/Nemo.jl/issues/810.
* Models in OscarODEbase.jl
This module supports, barring a few exceptions, every polynomial model in ODEbase. These exceptions arise due to exponentiating parameters by other parameters, which is functionality not supported in OSCAR.

The exceptions are:
- BIOMD0000000060
- BIOMD0000000291
- BIOMD0000000533
- BIOMD0000000594
- BIOMD0000000614
- BIOMD0000000630
- BIOMD0000000668
- BIOMD0000000919
