module OscarODEbase
export ODEbaseModels
export ODEbaseModel
export get_odebase_model
export get_polynomials_random_specialization
export get_polynomials_fixed_specialization
export get_ID
export get_description
export get_ODEs
export get_constraints
export get_constraints_generic_specialization
export get_polynomial_ring
export get_parameter_ring
export get_deficiency
export get_stoichiometric_matrix
export get_reconfigured_stoichiometric_matrix
export get_kinetic_matrix
# TODO remove using Oscar from odebase files
using Oscar;
using Base;
const dir = Base.pkgdir(OscarODEbase)
const chems=readdir(joinpath(dir,"src/odes/"),join=true)
const ODEbaseModels=[splitext(basename(chem))[1] for chem in chems]

struct ODEbaseModel
    ID::String
    description::String
    numSpecies::Int
    numParams::Int
    speciesNames::Vector{String}
    paramNames::Vector{String}
    numIrr::Int
    numRev::Int
    deficiency::Int
    rational::Bool
    polynomial::Bool
    massAction::Bool
    paramsRing
    polRing
    ODEs::Vector
    constraints::Vector
    paramValues::Vector
    stoichMatrix::QQMatrix
    reconStoichMatrix::QQMatrix
    kineticMatrix::QQMatrix
end

function get_reduced_sys(sys::Vector)
    mons=unique(collect(Iterators.flatten([collect(monomials(f)) for f in sys])))
    S = matrix_space(QQ, length(sys), length(mons))
    M_list=collect(Iterators.flatten(([[QQ(coeff(f,m)) for m in mons] for f in sys])))
    M=matrix(QQ,length(sys),length(mons),M_list)
    rk,M=rref(M)
    M=matrix(QQ,[M[i,:] for i in 1:rk])
    new_sys=[sum([mons[j]*M[i,j] for j in 1:length(mons)]) for i in 1:rk]
    return new_sys
end

function Base.show(io::IO, model::ODEbaseModel)
    id=model.ID
    desc=model.description
    species=string(model.numSpecies)
    params=string(model.numParams)
    println(io, "Model $id, with $species species and $params parameters.")
    print(io, "$desc")
end

get_ID(model::ODEbaseModel)=model.ID
get_description(model::ODEbaseModel)=model.description
"""
Returns the polynomial ideal generated by the ODEs.
!!! warning
    The (generators of) the ideal have variables that are *not* in scope by default, and need to be loaded manually. e.g.
    ``` julia-repl
    julia> model=get_odebase_system("BIOMD0000000854");
    julia> R=model.polRing;
    julia> (x1,x2,x3,x4)=gens(R)
    ```
"""
get_ODEs(model::ODEbaseModel)=ideal(model.polRing,model.ODEs)
get_constraints(model::ODEbaseModel)=model.constraints
get_polynomial_ring(model::ODEbaseModel)=model.polRing
get_parameter_ring(model::ODEbaseModel)=model.paramsRing
get_fixed_parameter_values(model::ODEbaseModel)=model.paramValues
get_deficiency(model::ODEbaseModel)=model.deficiency
get_stoichiometric_matrix(model::ODEbaseModel)=model.stoichMatrix
get_reconstructed_stoichmetric_matrix(model::ODEbaseModel)=model.reconStoichMatrix
get_kinetic_matrix(model::ODEbaseModel)=model.kineticMatrix

# we do not want to remove any coefficients entirely
function rand_nonzero(len::Int)
    ints=Int[]
    for x in 1:len
        num=rand(Int8)
        while num==0
            num=rand(Int8)
        end
        push!(ints,num)
    end
    return ints
end

function get_constraints_generic_specialization(model::ODEbaseModel)
    constraints = get_constraints(model)
    polynomialRing = get_polynomial_ring(model)
    parameterRing = get_parameter_ring(model)
    parameterField = fraction_field(parameterRing)
    R,x = polynomial_ring(parameterField, symbols(polynomialRing))
    phi=hom(polynomialRing,R,c->parameterField(c),x);
    return phi.(constraints), R
end


function get_constraints_rref_pivots(model::ODEbaseModel)
    # Construct the coefficient matrix of the constraints
    constraints = first(get_constraints_generic_specialization(model))
    constraintsVariables = sort(unique(Iterators.flatten(collect.(monomials.(constraints))));rev=true)
    @req all(m -> total_degree(m) <= 1, constraintsVariables) "non-affine constraints"
    constraintsMatrix = matrix(coefficient_ring(first(constraints)), [[coeff(constraint,x) for x in constraintsVariables] for constraint in constraints])

    # compute the reduced row echelon form of the constraints matrix
    # and only keep the ODEs of the pivot columns
    rrefConstraintsMatrix = rref(constraintsMatrix)[2]
    constraintsPivots = [findfirst(!iszero,rrefConstraintsMatrix[i,:]) for i in 1:nrows(rrefConstraintsMatrix)]
    return constraintsPivots
end
# reduce=true will set constraint=false

function get_polynomials_random_specialization(model::ODEbaseModel; constraint=false, reduce=false)
    randCoeff=rand_nonzero(length(gens(get_parameter_ring(model))));
    QQpolRing,tup=polynomial_ring(QQ,symbols(get_polynomial_ring(model)));
    phi=hom(model.polRing,QQpolRing,c->evaluate(c,randCoeff),tup);

    specializedODEs = phi.(gens(get_ODEs(model)))
    if reduce
        constraintsPivots = get_constraints_rref_pivots(model)
        specializedODEs = [ode for (i,ode) in enumerate(specializedODEs) if !(i in constraintsPivots)]
    end
    if constraint
        specializedConstraints = phi.(get_constraints(model))
        return union(specializedODEs,specializedConstraints), QQpolRing
    else
        return specializedODEs, QQpolRing
    end
end

function get_polynomials_fixed_specialization(model::ODEbaseModel;constraint=false,reduce=false)
    QQpolRing,tup=polynomial_ring(QQ,symbols(polynomial_ring(model)));
    phi=hom(model.polRing,QQpolRing,c->evaluate(c,get_fixed_parameter_values(model)),tup);
    specializedODEs = phi.(gens(get_ODEs(model)))

    if reduce
        constraintsPivots = get_constraints_rref_pivots(model)
        specializedODEs = [ode for (i,ode) in enumerate(specializedODEs) if !(i in constraintsPivots)]
    end
    if constraint
        specializedConstraints = phi.(get_constraints(model))
        return union(specializedODEs,specializedConstraints), QQpolRing
    else
        return specializedODEs, QQpolRing
    end
end

function get_odebase_model(reqID::String; rename=false)
    if !(reqID in ODEbaseModels)
        error("Specified ID is not supported")
        return
    end
    index=findfirst(x->x==reqID,ODEbaseModels)
    file=chems[index]
    include(file);
    if rename
        newparams=Oscar.gens(paramsRing)
        newpols=Oscar.gens(polRing)
        newparamsRing, newparams = polynomial_ring(base_ring(paramsRing), paramsValues)
        newpolRing, newpols = polynomial_ring(base_ring(polRing), speciesValues)
    system=ODEbaseModel(ID,desc,length(Oscar.gens(newpolRing)),length(gens(newparamsRing)),speciesNames,paramNames,irr,rev,def,rat,pol,mass_bool,newparamsRing,newpolRing,chemSystem,constraints,paramValues,matrix(QQ,stoichMatrix),matrix(QQ,reconStoichMatrix),matrix(QQ,kineticMatrix));
    else
    system=ODEbaseModel(ID,desc,length(Oscar.gens(polRing)),length(gens(paramsRing)),speciesNames,paramNames,irr,rev,def,rat,pol,mass_bool,paramsRing,polRing,chemSystem,constraints,paramValues,matrix(QQ,stoichMatrix),matrix(QQ,reconStoichMatrix),matrix(QQ,kineticMatrix));
    end

    return system
end

end # module
